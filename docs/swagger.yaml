openapi: 3.0.0
info:
  description: API for Sugar Salt Butter
  version: 1.0.0
  title: Swagger for Sugar, Salt, Butter
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: recipes
paths:
  /recipes:
    post:
      tags:
        - recipes
      summary: Add a new recipe to the collection
      description: ""
      operationId: addRecipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipe"
        description: Recipe object that needs to be added to the collection
        required: true
      responses:
        "200":
          description: OK - Recipe created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    get:
      tags:
        - recipes
      summary: Get recipes
      description: ""
      operationId: getAllRecipes
      parameters:
        - name: url
          in: query
          description: Recipe url
          schema:
            type: string
        - name: searchString
          in: query
          description: search terms
          required: true
          schema:
            type: string
        - name: skip
          in: query
          description: number of search results to skip
          schema:
            type: string
        - name: limit
          in: query
          description: max number of search results to return
          schema:
            type: string
        - name: orderBy
          in: query
          description: order for results: asc or desc
          schema:
            type: string
        - name: sortBy
          in: query
          description: recipe field to sort results by
          schema:
            type: string
      responses:
        "200":
          description: Recipes found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeSearchResults"
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  "/recipes/{id}":
    get:
      tags:
        - recipes
      summary: Returns a recipe by ID
      description: ""
      operationId: get
      parameters:
        - in: path
          name: id
          description: Recipe ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request - missing recipe ID
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    put:
      tags:
        - recipes
      summary: Updates a recipe by ID
      description: ""
      operationId: put
      parameters:
        - in: path
          name: id
          description: Recipe ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipe"
        description: Recipe object to update
        required: true
      responses:
        "204":
          description: OK - Recipe updated
        "400":
          description: Bad Request - missing recipe ID or body
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

  /lists:
    post:
      tags:
        - lists
      summary: Add a new list to the collection
      description: ""
      operationId: addList
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/List"
        description: List object to create
        required: true
      responses:
        "200":
          description: OK - List created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWithLinks"
        "401":
          description: Unauthorized
        "404":
          description: Recipe Not Found
        "500":
          description: Internal Server Error
    get:
      tags:
        - lists
      summary: Returns all lists for a user
      description: ""
      operationId: getAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayListWithLinks"
        "400":
          description: Bad Request - missing list ID
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  "/lists/{id}":
    get:
      tags:
        - lists
      summary: Returns a list by ID
      description: ""
      operationId: getList
      parameters:
        - in: path
          name: id
          description: List ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWithLinks"
        "400":
          description: Bad Request - missing list ID
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  "/lists/{id}/recipes":
    post:
      tags:
        - lists
      summary: Add a recipe to a list
      description: ""
      operationId: addRecipeToList
      parameters:
        - in: path
          name: id
          description: List ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListRecipe"
        description: Recipe to add to list
        required: true
      responses:
        "204":
          description: OK - Recipe added to list
        "400":
          description: Bad Request - missing list or recipe ID
        "401":
          description: Unauthorized
        "404":
          description: Recipe or List Not Found
        "500":
          description: Internal Server Error
  "/lists/{id}/recipes/{recipeId}":
    delete:
      tags:
        - lists
      summary: Remove recipe from list
      description: ""
      operationId: deleteRecipeFromList
      parameters:
        - in: path
          name: id
          description: List ID
          required: true
          schema:
            type: string
        - in: path
          name: recipeId
          description: Recipe ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: OK - Recipe removed from list
        "400":
          description: Bad Request - missing list or recipe ID
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
servers:
  - url: http://localhost:3050/api
components:
  schemas:
    Recipe:
      type: object
      required:
        - title
        - ingredients
      properties:
        userId:
          type: string
        title:
          type: string
          example: choc chip cookies
        image:
          type: string
          example: pathToImage
        dateCreated:
          type: string
          format: date-time
        dateLastEdited:
          type: string
          format: date-time
        source:
          type: string
          example: cookiesblog.com/chocchip
        ingredients:
          type: array
          xml:
            name: ingredients
            wrapped: true
          items:
            $ref: "#/components/schemas/Ingredient"
        instructions:
          type: string
          example: mix everything and bake for 10 mins.
        tags:
          type: array
          example:
            - cookies
            - quick
            - desserts
          xml:
            name: tags
            wrapped: true
          items:
            type: string
        rating:
          type: integer
          format: int32
          example: 4
        wantToTry:
          type: boolean
          example: true
        servings:
          type: integer
          format: int32
          example: 20
        cookingTime:
          type: string
          example: 10 mins
        prepTime:
          type: string
          example: 30 mins
        notes:
          type: string
          example: don't forget to have the butter at room temperature
        author:
          type: string
          example: super chef
        storage:
          type: string
          example: in a container for up to 1 week
        freezable:
          type: boolean
          example: true
        equipment:
          type: string
          example: bowl, spoon for mixing and baking tray
        nutrition:
          $ref: "#/components/schemas/NutritionalInfo"
      xml:
        name: Recipe
    Ingredient:
      type: object
      required:
        - name
      properties:
        quantity:
          type: number
          example: 150
        unit:
          type: string
          example: g
        name:
          type: string
          example: flour
        group:
          type: string
          example: sponge ingredients
    NutritionalInfo:
      type: object
      properties:
        calories:
          type: integer
          example: 200
        carbs:
          type: number
          example: 20
        protein:
          type: number
          example: 2
        fat:
          type: number
          example: 12
    RecipeSearchResults:
      type: object
      required:
        - count
        - recipes
      properties:
        count:
          type: integer
          example: 100
        recipes:
          type: array
          xml:
            name: recipes
            wrapped: true
          items:
            $ref: "#/components/schemas/Recipe"
    List:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: my shopping list
    ListItem:
      type: object
      required:
        - name
      properties:
        quantity:
          type: number
          example: 150
        unit:
          type: string
          example: g
        name:
          type: string
          example: flour
        recipeId:
          type: string
          example: recipe1
        servings:
          type: integer
          example: 4
    ArrayListWithLinks:
      type: array
      items:
        $ref: "#/components/schemas/ListWithLinks"
    ListWithLinks:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        title:
          type: string
          example: my shopping list
        dateCreated:
          type: string
          format: date-time
        dateLastEdited:
          type: string
          format: date-time
        recipes:
          $ref: "#/components/schemas/RecipesInList"
        items:
          type: array
          xml:
            name: items
            wrapped: true
          items:
            $ref: "#/components/schemas/ListItem"
    RecipesInList:
      type: object
      properties:
        href:
          type: string
          example: /api/lists/list1/recipes
        recipesData:
          type: array
          items:
            $ref: "#/components/schemas/RecipesDataInList"
    RecipesDataInList:
      type: object
      properties:
        _id:
          type: string
          example: recipe1
        title:
          type: string
          example: my first recipe
        image:
          type: string
          example: http://localhost/recipe.png
        servings:
          type: integer
          example: 4
        href:
          type: string
          example: /api/lists/list1/recipes/recipe1
    ListRecipe:
      type: object
      required:
        - recipeId
      properties:
        recipeId:
          type: string
          example: recipe1
        recipeServings:
          type: integer
          example: 4